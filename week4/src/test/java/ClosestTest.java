import org.apache.commons.lang3.time.StopWatch;
import org.assertj.core.data.Offset;
import org.junit.Assert;
import org.junit.Test;

import java.util.Date;
import java.util.LinkedList;
import java.util.OptionalDouble;
import java.util.Random;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Created by Marcin_Bazarnik on 2016-10-18.
 */
public class ClosestTest {

    @Test
    public void testJoinToFirstArray() throws Exception {
        Integer[] left = {1, 2, 3};
        left = Closest.joinToFirstArray(left, new Integer[] { 4, 5, 6} );

        Assert.assertArrayEquals(new Integer[] { 1, 2, 3, 4, 5, 6}, left);
    }

    @Test
    public void testMinimalDistance() throws Exception {
        assertEquals(1, Closest.minimalDistance(new int[] {1, 2, 3, 4, 5, 6, 7}, new int[] {0, 0, 0, 0, 0, 0, 0}), 0.001);
        assertEquals(9, Closest.minimalDistance(new int[] {-30, -20, -10, 1, 10, 20, 30}, new int[] {0, 0, 0, 0, 0, 0, 0}), 0.001);
        assertEquals(9, Closest.minimalDistance(new int[] {0, 0, 0, 0, 0, 0, 0}, new int[] {-30, -20, -10, 1, 10, 20, 30}), 0.001);
        assertEquals(1, Closest.minimalDistance(new int[] {-10, -8, -3, 1, 0, 2, 4, 7, 8}, new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}), 0.001);
        assertEquals(1, Closest.minimalDistance(new int[] {-10, -8, -3, 1, 1, 0, 2, 4, 7, 8}, new int[] {0, 0, 0, 0, 1, 0, 0, 0, 0, 0}), 0.001);
    }

    @Test
    public void testAdditional() {
        Offset<Double> offset = Offset.offset(0.00001);

        int[] x;
        int[] y;

        x = new int[]{-23, -93, 53, -10, 35};
        y = new int[]{-61, -54, 41, -15, 64};
        assertThat(Closest.minimalDistance(x, y)).isCloseTo(29.206163733020468, offset);

        x = new int[]{0, 3};
        y = new int[]{0, 4};
        assertThat(Closest.minimalDistance(x, y)).isCloseTo(5.0, offset);

        x = new int[]{7, 1, 4, 7};
        y = new int[]{7, 100, 8, 7};
        assertThat(Closest.minimalDistance(x, y)).isCloseTo(0.0, offset);

        x = new int[]{4, -2, -3, -1, 2, -4, 1, -1,  3, -4, -2};
        y = new int[]{4, -2, -4,  3, 3,  0, 1, -1, -1,  2,  4};
        assertThat(Closest.minimalDistance(x, y)).isCloseTo(1.414213, offset);

        x = new int[]{-49388, -93368, -28876, 16230, 11449, -7897, 1876, -34577, 369, 42553, 18661, -42247, -40730, 58055, -946, 49396, -66769, -54385, -68103, -2120, -2751, -77232, -85546, -63138, -82554, -61451, -25223, 21115, 59718, -97253, 67231, -76806, -34302, 91329, 11342, 69461, 43872, 72843, -64870, -83920, -62528, 55923, -95549, 90642, -29204, 20556, -40644, -24064, -12306, 47348, 5703, 52280, 6588, 51542, -26885, -47289, -9777, -90023, 70824, -62713, 99154, 13929, 33617, -1863, 44341, -25376, 97559, -10629, -64544, -93360, 41271, -49946, 27525, -21328, -5846, 29894, -28978, -57568, 4459, -9354, 52534, -99686, -25771, -48872, -44556, -24905, -9366, 43247, -17647, 57051, -69968, -3943, -48166, -34177, -48715, -31892, -62414, -74023, -96588, 18027, -513, 87018, 91728, 77796, -39548, 47780, 78269, -85782, 77263, -83659, 43518, -62357, -88439, 66420, -61752, 1197, 49003, -98265, -74810, 5161, 71312, -35729, 64694, 58692, -5531, 25424, -32591, -65818, 80892, 33377, -65529, -52999, 68928, 21836, 96904, -640, 92611, 22787, 50464, 44945, -54477, 93440, 34202, -15759, -99732, 32118, 97413, 95498, 70119, 5785, -36236, 82059, -36017, 43719, 94, -54436, 6580, -46894, -37722, -22019, 31129, 44587, -51210, 99002, -66329, -27540, 59780, 23949, -55867, 45633, -28041, -32048, -67329, 6068, -79902, -24227, 30883, -45100, -45394, 14340, 80619, -12926, -35049, 15208, 70868, -89512, 86029, 46262, 50957, -40266, -68294, -30973, -37685, 26986, -33949, -88831, 65273, -85381, -78616, -87202, -1971, 29075, -21787, 3706, -3978, 85638, -8325, 54530, 79793, 79171, -67351, 90158, -96965, -91434, 91603, -46061, 78113, -89577, 50469, 52517, 97011, -84557, 12945, 23501, -66985, 65812, 90804, -75869, -98183, 9968, -29226, -34807, -50208, -37333, -15792, 25763, 43228, -93142, -34552, -27914, -17060, 61429, -44136, 43356, -3108, 31944, 48077, -18015, 62971, 14327, -9973, -62466, -71126, 2811, 85262, 43631, 45184, 48285, -57461, -59981, -96085, 66621, 75829, -19360, -94078, -5505, -4453, 3744, -96779, -56493, -44114, -36148, 80998, 19552, 44001, 61795, -88368, 62157, -23511, -96537, -40091, -51860, -10012, 76372, -18057, 39938, 14038, -26114, 25612, 16951, -38514, -13754, -43628, -36777, -68633, 45944, -79626, 48706, 87338, 74628, 60038, 17846, 27153, -68521, 68756, 7735, 5606, -46826, -76578, 26393, -9718, -2377, 68261, 24170, 79250, 45435, -5028, 29694, 98444, -62196, -68483, 45399, -74977, 66479, -59017, 25521, 44432, -34267, 25218, 84200, -11103, -32156, -39470, -3833, -9580, 93165, 96169, -20946, 23629, -58934, -6137, -70689, 32213, 80422, -5827, 22757, -68805, -4280, 41568, 95201, 17365, 58925, -37608, 64946, -41948, -71934, -14184, -98944, -95787, -31173, -80664, -8986, 52580, 20307, 70493, -76742, -33445, -29280, 89963, 61113, -23047, 50194, 47185, -12012, -95763, -46904, -31310, 44177, -16895, 25294, 60868, 27040, 95252, 9527, -3999, 46395, -35328, -41196, -63429, 88248, -45478, -43826, -48659, 25966, -22505, -3803, -66388, -25918, 88715, 44549, 8668, 64589, -62195, -97342, 38527, 14187, 21815, 73905, -18104, -58205, 3402, -78238, 65742, -52498, 62446, -50883, -2084, -30746, -24170, 27192, 89957, -7476, 16322, -40782, 91348, -63050, 84638, 82223, -35646, 44371, 57736, 98225, 71041, 24988, 84975, -82129, 53269, 92697, -78121, -34060, 60482, -5363, -75400, 53015, -62399, 37504, 4614, 52371, -30324, -75993, -81716, -64318, -36391, -10319, 83890, -60165, -35741, 26480, -85795, 69380, 10979, 5603, 88373, -70922, 16030, 79196, -3326, 43564, 48408, -29486, 48048, -17305, 45030, -24315, 7729, -33662, -21407, 31498, -91455, -5876, -43978, -27086, -38843, -95161, 11675, 1819, -83699, 66108, -7972, 52946, 90680, -24391, -82093, 17123, 20919, 97449, -96586, 18624, -26326, 21326, -87606, -54134, -96026, 93341, -56586, -5826, 58008, -17035, -526, -10497, -39421, -23362, -41954, -56132, 22181, 66715, -74001, -90563, -44617, -84789, -57276, 56656, -24492, 7777, -58153, 69962, 60145, -88866, 11407, 31868, 25738, 15912, 79602, 31604, 286, -76119, 2167, -33684, 37392, -84537, -64071, 73620, 41391, 77435, -98360, 29943, -83057, -43568, 3098, 10700, -44650, 17530, 90463, 38044, 38483, -53679, 83634, -63158, 28680, 62952, -23189, 58564, -93432, 99214, 45009, 54917, 71547, 36257, -49811, -5372, 77439, -66615, 80441, -34820, -73751, 92248, -33416, 89305, 49577, -19716, -56097, 18748, 69707, 58719, -32335, -72021, 2266, 50972, -56984, -78824, 47711, 38109, 64847, -38324, -57145, 61525, 55533, 78576, -80478, 12375, -68517, -9864, 23624, -29998, 9911, -11731, 63382, 62057, 83505, 19989, -68010, 49331, -66238, -28416, -62723, 95948, -75587, -73422, -32755, 43862, 34430, -89624, -67877, 58320, -85762, 63817, 97387, -38896, -83959, -74198, -8137, -5664, 75654, -62210, 96335, -61069, -71179, -9767, 72282, 80771, -55688, -99553, 91706, 54920, 28168, -87283, 39950, 42774, 98376, -47645, -68463, -91948, 29494, 64621, 12959, 10196, -20738, 69293, 73432, 70228, 84585, 44903, 38045, -72304, -28110, -93367, -83977, 11970, -40903, -6028, -92456, -45704, 96849, -64213, 12025, 44303, 47668, -97385, -75038, 70097, -73578, 41652, 3912, -87, 93206, 75356, 41616, -20417, -87535, -86290, -59406, -44236, -77423, 26587, -99271, -22725, -1053, 99405, 63270, -42222, -70841, -39949, -42892, 71068, 83840, 6253, 57015, 52637, -39734, -17327, 84446, -22383, 99499, -57960, -2601, -88471, 95906, 73705, 19473, 68259, -2820, 35775, 16413, -58235, 63110, -73543, 35310, 17077, 9565, -51202, -15233, -62024, -10463, 33162, -12204, 58565, -13816, -11302, -51048, -95739, -4978, -13648, 48549, -38742, 22730, -60349, -541, -40471, -81060, -22201, 94791, -30571, 51523, 9364, -32451, 41178, -33077, -57930, 63008, 52498, -12765, -95920, -82138, 84231, 98765, -46867, 79961, -97786, 57710, 25573, -5888, -64228, -44283, 55656, 19484, 38512, -91911, 29546, -30002, 60412, -29302, -26325, 17750, 54505, 14890, 12257, 3190, -50553, 51237, 11525, 52149, -61338, 71867, 46135, 44671, -1836, 66638, -53489, -96215, -84301, -17482, -62015, -88045, 55669, 306, 19244, -80857, -50377, 66618, -10817, -80259, -84041, 29040, 16840, 95457, -93900, -73932, -75685, 69804, -88991, 16918, 97435, 69454, 63749, -56666, -39832, 64750, 97650, -48600, -50011, 21160, 57311, -92572, -13724, 49141, -92444, 53145, -7759, 43049, -83310, 37010, 42104, 47253, -84051, 75856, -16236, -94900, 93128, -52634, -21324, 21763, -72453, -80412, -69204, -60590, -42622, -77013, -28586, 80983, -77579, -83808, -81821, -85255, -18657, 46076, -61822, 91274, -44546, 50303, 37674, 29766, 82391, 11844, -58936, -92744, 85555, 43568, -54080, -9284, -73287, 31300, 24162, 44255, -8023, 20818, -14485, 73634, -95757, -32371, 34741, -63266, 49586, -48007, -60676, 53313, -48120, -25535, -46323, 14198, -61930, -80473, 35149, -47005, -29864, -67114, -71197, 86668, -31716, 70099, -40829, 52693, -58147, 594, 42584, 99236, 78656, -67675, 47437, -87899, -22870, -69489, -8967, 98919, -31556, -20041, -40731, -28316, 7980, 14520, -73478, 63838, -38463, -61419, 25612, 27236, 89259, 87818, -85507, 46516, 764, 14845, -89713, 84410, 7047, -63853, 59018, 60151, -22445, 9440, -442, -53059, 60732, 96566, -38890, 94230, -96409, 71198, -6767, -45756, -74144, 29221, -41218, 26532, -20654, 64717, -69349, -11028, 49058, -78683, 95114, -44781, 41320, -33229, -41319, 38096, -69238, 29261, -9364, -97606, 1015, 84743, -34743, 92686, -54211, 21126, -13696, 7631, -93880, -92429, 11253, -1528, -69448, -98036, -38772, 95213, -42083, -22892, -52113, 54944, -51310};
        y = new int[]{-66901, -7489, 18575, -42317, -19208, 90004, -45830, 59388, 25474, -42317, -86638, -83777, 36510, -30389, -77251, -55166, 24643, 57516, 97526, 82419, -18055, -84795, 29202, -93496, -88848, -17000, -75811, -83209, 21229, -46404, -7581, 57679, -93345, -79090, 19338, -82446, -11952, 28470, -16676, -93393, 49015, -5359, -5277, 70400, 79082, 42368, -13075, 47453, -27344, 27404, -72080, -10822, -29708, -46988, 14918, -9692, -43690, 85334, 14361, -32972, -50148, 50614, 31962, 26989, -73146, -82707, 22698, -29000, -80001, 28336, 75868, -11271, 33327, 78268, 49682, 54285, -61010, 53467, 93251, 11618, 31890, -74474, -19233, -84940, -58647, -8264, 98313, -39520, 32258, 46458, 54339, 42470, 49638, 36048, -9688, 52352, 91748, -14129, 36626, -64295, 71818, 9657, 61915, 62508, -13072, 53927, 95169, -88838, 36654, 59409, -12765, 63719, -73939, 54717, 68968, -34958, -72549, -70270, 61567, -37745, -16264, 6776, -26240, 98403, -33778, 18047, -11406, 4636, 64189, 41896, -9050, 94186, -87692, -16125, -1152, 81501, 10620, -4858, -39083, -17700, -64402, 47574, -69968, -50881, 517, -40395, 15087, -74230, 92622, -68791, -41269, -54265, 75388, 32645, 87093, 31999, 78424, -65866, -70309, -54828, 19541, -52436, 20361, -60866, 67713, 82179, 76909, 56800, 19224, -54899, -39373, -65594, 99123, -92259, 73999, 75070, -78818, -56333, -73063, 39248, -50681, -47297, 79057, -62822, 45969, 34900, 15044, 4749, -10808, -83286, 87304, -10114, 47663, 69263, 84385, 32618, 35702, 33452, -7930, -47351, 98312, 40432, -31747, -63923, 12608, -63845, -95517, 22391, 65979, 72873, -24632, -60714, -27576, -42663, -67849, 23646, -25860, 20440, 82003, -25887, 16611, 98511, 86876, -88788, -81711, 90438, 73041, 48001, 87702, 30515, -39312, -80852, 12623, -95645, -64423, 1796, -84839, -51452, -41136, 47616, 99617, 44237, 85281, -56525, -90985, 86410, 25694, 7269, -87871, 4231, -94460, 5136, 81516, 43160, 49148, 19636, -48387, 62148, 82173, 23831, 3301, -84852, 48590, -21923, 36915, 32795, 25577, 84927, -70397, -56053, 66556, 88491, -75500, 28369, 77897, -88328, 5560, -77433, -98516, -63612, 164, -84011, 94653, -41427, -15513, -49669, -23477, 33960, -82312, 62076, 76361, 51393, 25703, -70614, -54267, -23377, -47050, 86347, -23597, 21907, 99905, 42853, 29768, -90995, -68648, -45077, 24354, -9157, 28973, 55556, -68667, -42737, 79592, 69172, -56160, 97356, 90137, 24361, 174, -85155, -75323, 22052, 70553, -25774, -99807, 7618, 87993, -85640, -16611, -90201, -38983, -25517, -52905, 27142, -91110, 31418, 76912, 92174, -94702, 61008, -78532, 59700, 83852, 42650, -45933, 75609, -557, -3390, -13692, -73767, -97335, 3431, -96791, 14960, -17071, 70367, -938, 49416, 71693, -98358, 62891, 71971, -38911, 72212, -52919, -96607, 50518, -90298, 94049, -14161, 45307, 34826, 49256, 90316, 73126, 40953, 84007, -30407, -10888, 8482, -31186, -39875, -11265, 6874, 61353, 59218, -44459, 81147, 45898, -85073, -31899, 91259, 60582, 16755, -61554, 73129, -7652, -48405, 18208, -81083, 77999, -93504, -30333, -94531, 37877, -60992, 74486, -63168, 59945, 14087, -27403, 48769, -84453, 77897, -23116, 70730, -27833, 895, -35575, -9990, 28226, -13460, -36634, -71075, -27568, 50827, 18883, -62746, -20653, -68137, -17766, -75637, -93090, 92726, -29428, 84605, 81256, -22909, -94175, 46851, 61980, 65463, 92141, 32690, 4365, 98035, 24654, 83787, -88249, 29740, 28305, -88591, 7617, 53107, 14772, 5957, 32302, -20960, -75514, -94304, -89422, 74651, -35093, 62892, 71218, 66374, 95676, -45921, -46268, 8842, -38453, 77526, 47174, 2109, 24067, -10934, 34826, -39251, 25646, -46607, -35537, 3660, -5807, -33805, -30901, 58551, 65138, 30791, 76548, 5412, -32646, 5162, -95874, -3736, -58891, 38588, -80914, -19997, -4875, 89463, -49459, 60041, 77463, -81588, -62487, -37491, -35427, -12836, -86187, 81196, 54714, 25807, 29569, -54509, 1453, -67499, -31964, -74131, 40837, 6455, -38123, 16397, 59138, 43609, -78342, -34827, 63580, 99790, 96215, 50945, -41763, 17432, 25608, 61875, 46441, -18757, 88650, 32732, -14114, 7356, 24883, -42909, -96874, 15419, 60482, 42549, 71817, 83114, 83601, 9033, -57456, -25943, -50649, -66482, -67068, -1408, -47062, 9972, -89275, 24824, 34417, -88812, -24041, -56874, 94264, 84605, -98522, 8693, -91731, -27684, 53674, 93631, 12455, 52423, 60005, 9799, -59978, 54950, -119, -1658, 33237, 38526, -65928, -37775, 61756, 58971, -37277, 78515, -1326, 10842, -28269, 11084, 99968, 43857, 91078, -57850, 16929, 52123, 82225, 25423, -44779, -6653, -61275, 31672, 86197, 73932, -12468, -67319, 86368, 12250, 31186, 49022, 48436, -86975, 91232, -13789, -58279, 43433, 78851, 27527, 30007, -38, 92587, -96352, 8968, -13526, -40240, -55429, -88761, 89920, 48815, -55715, -44409, -73020, 18803, 43388, -30815, 7333, -77714, 35603, -54010, 78598, -42874, -61338, 91379, 64582, -32979, 71186, 28482, -83990, 15624, -96689, -86372, 45418, -77071, -21818, 51532, -95531, -33768, 12489, -32849, 1121, -31548, -16013, -53304, -91437, 91127, -94882, 49904, 91591, 86704, -21702, 86442, -20835, -96886, 97488, 16532, -60864, -85054, 56020, -95430, 48980, 69398, -68768, 44357, -88645, -57976, 12435, 33937, 94980, 97858, -4859, -82468, 77810, -89069, 54501, 25433, -66140, -70249, -48526, 65445, -75994, 30453, 39634, 37777, -88557, -4797, 37522, 76893, 83236, -87676, 39483, -2362, 2906, -25647, 64077, 59703, -83900, -81707, 61083, 11355, 13741, 9841, 26627, -17198, -75930, 84225, -27833, 39041, 35755, -19402, -82675, -80636, 85109, 43554, -68241, 86655, 46748, 36307, 24960, -65070, 29734, 25366, -76708, -20758, 73840, -45859, -29013, 14708, -15241, -37573, 90226, 40429, -445, 97483, -49771, -12586, 14322, 99121, 42541, 29251, -86179, -78472, 65410, 77905, 43433, -78565, -36955, -60809, -46932, 13727, 80877, 40182, -61255, -91171, -86068, 6186, 19018, 91230, 62797, -12157, -81975, 68767, -55828, 71501, -96389, 41715, -10863, -35158, 77833, 37448, 7531, -28318, -66579, 11009, -11419, -44399, 81973, -85693, 55176, 78014, 91767, -67380, 99245, -37492, 4882, 78269, 88605, -90230, 88412, -25992, -53433, 45285, 51693, 97444, -60835, 42429, -34553, 13133, 23627, 69012, 55009, -83351, 91092, 32163, 46862, 32629, -73397, -22649, -62769, 79422, 39852, 28313, 68338, -21124, 42325, 69979, -96604, -81255, -47324, 56525, 63706, -25841, 18414, 87200, -31144, -6162, 7640, -510, -71651, -17987, -19946, 90584, 61611, 41593, -5250, -12534, 98550, -4487, -5944, -21065, 41705, -15055, 60580, 34441, 22415, -24747, -44744, 31588, -48348, 98837, -22411, 76984, -11335, -78073, 16341, -45706, 35518, -49309, -65165, -67552, 19631, 21415, 48326, 32504, -9826, -98213, 24379, -87974, -45927, 16111, -11793, -65050, -51849, 67648, 39622, -41899, -93564, -47559, 39787, -47955, -72250, 70166, -51484, -83121, -9428, -53756, -70384, -52818, -29358, -43419, -68544, 87642, 68467, 98031, 72816, -98886, -44180, 57716, 64929, -21863, 60457, 3068, 57044, -40233, 55406, -43314, 46244, 23551, 89092, -74034, -20095, 7481, -64706, 8704, -74811, -47402, -57881, 90730, 2740, -92087, -58487, -61992, -72363, 31733, 70364, 5177, -10009, 43937, -6262, -78361, -77118, 24009, -16805, -76540, -16244, 83086, -33086, -65153, 32020, -66547, 90819, 24502, 79438, -64756, -38209, 37814, 59627, 47313, -51042, 14685, 92180, -71219, -41065, 69601, -25980, 55094, -23393, -12695, -91328, 55858, 33771, 76569, 98419, -66577, -58268, -7765, -21462, -17841, -49177, -30343, -30680, 82689, -32011, -8681, -17625, 6379, 97662, -55972, 49068};
        assertThat(Closest.minimalDistance(x, y)).isCloseTo(95.18928, offset);

        x = new int[]{0, 5, 3, 7};
        y = new int[]{0, 6, 4, 2};
        assertThat(Closest.minimalDistance(x, y)).isCloseTo(2.828427, offset);

        x = new int[]{0, 0, 0, 0};
        y = new int[]{0, 1, 2, 3};
        assertThat(Closest.minimalDistance(x, y)).isCloseTo(1, offset);

        x = new int[]{0, 1, 2, 3};
        y = new int[]{0, 0, 0, 0};
        assertThat(Closest.minimalDistance(x, y)).isCloseTo(1, offset);

    }

    @Test
    public void testMerge() throws Exception {

        Point[] p1 = toPoints(new int[]{0, 0, 0, 0}, new int[]{0, 2, 4, 6});
        Point[] p2 = toPoints(new int[]{0, 0, 0}, new int[]{1, 3, 5});
        Point[] points = Closest.mergeResult(p1, p2);

        for (int i = 0; i < p1.length + p2.length; i++) {
            assertEquals(i, points[i].y);
        }
    }

    @Test
    public void testMinimalIterativeDistance() throws Exception {
        assertEquals(1, Closest.iteratveMinimalDistance(
                toPoints(new int[] {1, 2, 3, 4, 5, 6, 7}, new int[] {0, 0, 0, 0, 0, 0, 0}),
                0, 7,
                Double.POSITIVE_INFINITY), 0.001);

        assertEquals(1, Closest.iteratveMinimalDistance(
                toPoints(new int[] {20, 15, 11, 8, 6, 5, 4}, new int[] {0, 0, 0, 0, 0, 0, 0}),
                0, 7,
                Double.POSITIVE_INFINITY), 0.001);

        assertEquals(1, Closest.iteratveMinimalDistance(
                toPoints(new int[] {0, 0, 0, 0, 0, 0, 0}, new int[] {20, 15, 11, 8, 6, 5, 4}),
                0, 7,
                Double.POSITIVE_INFINITY), 0.001);

    }

    public Point[] toPoints(int[] x, int[] y) {
        Point[] points = new Point[x.length];
        for (int i = 0; i < x.length; i++) {
            points[i] = new Point(x[i], y[i]);
        }
        return points;
    }

    @Test
    public void testPerformance() throws Exception {
        Random random = new Random(new Date().getTime());

        int[] x = random.ints(1000000, -100000000, 100000000).toArray();
//        int[] x = random.ints(100000, 0, 1).toArray();
        int[] y = random.ints(1000000, -100000000, 100000000).toArray();

        ClosestTwoArraysPawel closestTwoArrays = new ClosestTwoArraysPawel();

        LinkedList<Long> times = new LinkedList<>();
        for (int i = 0; i < 200; i++) {
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
//            Closest.minimalDistance(x, y);
            closestTwoArrays.minimalDistance(x, y);
            stopWatch.stop();
            times.add(stopWatch.getTime());
            System.out.println("i=" + i + " " + stopWatch.getTime() + " ms");
        }
        OptionalDouble average = times.stream().skip(20).mapToLong(Long::longValue).average();
        System.out.println("Avg=" + average);
        assertTrue(average.getAsDouble() < 200);
    }
}